// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CashfreeAnalyticsSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppTrackingTransparency
import CFNetworkSDK
@_exported import CashfreeAnalyticsSDK
import CoreData
import Foundation
import MachO
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class CFAnalyticsConstants {
  public static var transaction_id: Swift.String
  @objc deinit
}
public struct CFTransactionMeta {
  public let source: Swift.String
  public let environment: Swift.String
  public let order_token: Swift.String
  public let x_api_version: Swift.String
  public let x_request_id: Swift.String
  public init(source: Swift.String, environment: Swift.String, order_token: Swift.String, x_api_version: Swift.String, x_request_id: Swift.String)
}
@_hasMissingDesignatedInitializers final public class CFCoreDataPersistenceController {
  public static let shared: CashfreeAnalyticsSDK.CFCoreDataPersistenceController
  final public func addEvents(_ userEvent: CashfreeAnalyticsSDK.UserEvent, order_token: Swift.String)
  final public func getTransactions(completionHandler: @escaping ([CashfreeAnalyticsSDK.CFAnalytics]) -> Swift.Void)
  final public func deleteEvents()
  final public func deleteEvents(with entityName: Swift.String)
  final public func isTransactionRowCreated() -> Swift.Bool
  final public func didFinishTransaction()
  final public func createARowInTransactionTableForTheTransaction(transactionMeta: CashfreeAnalyticsSDK.CFTransactionMeta)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CFReachability {
  public static let shared: CashfreeAnalyticsSDK.CFReachability
  public enum ReachabilityStatus : Swift.String {
    case notReachable
    case reachableViaWWAN
    case reachableViaWiFi
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var currentReachabilityStatus: CashfreeAnalyticsSDK.CFReachability.ReachabilityStatus {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CFEventManager : CFNetworkSDK.APIHandlers {
  public static let shared: CashfreeAnalyticsSDK.CFEventManager
  final public func add_new_event(eventName: Swift.String, callingObject: Swift.String, payment_session_id: Swift.String)
  final public func sendEventsToBackEnd(fromUISDK: Swift.Bool, environment: Swift.String, payment_session_id: Swift.String)
  final public func onSuccess(apiState: CFNetworkSDK.APIState, result: Swift.Dictionary<Swift.String, Any>)
  final public func onFailure(apiState: CFNetworkSDK.APIState, response: Swift.Dictionary<Swift.String, Any>)
  final public func onSuccess(apiState: CFNetworkSDK.APIState, result: [Swift.Dictionary<Swift.String, Any>])
  @objc deinit
}
public struct UserEvent {
}
public enum UserEventList : Swift.CustomStringConvertible {
  case SET_ORDER_TOKEN
  case SET_ENVIRONMENT
  case BUILD_CFSESSION_OBJECT
  case ENVIRONMENT_MISSING
  case ORDER_TOKEN_MISSING
  case INVALID_ENVIRONMENT_SET_
  case CFSESSION_CREATION_SUCCESSFUL
  case SET_CARD_PAYMENT_CHANNEL
  case SET_CARD_NUMBER
  case SET_CARD_HOLDER_NAME
  case SET_EXPIRY_MONTH
  case SET_EXPIRY_YEAR
  case SET_CVV
  case INITIATING_EMI_CARD_PAYMENT
  case SET_BANK_NAME
  case SET_EMI_TENURE
  case MISSING_EMI_TENURE
  case BUILD_CFCARD_OBJECT
  case BUILD_CFEMICARD_OBJECT
  case CARD_PAYMENT_CHANNEL_MISSING
  case CARD_NUMBER_MISSING
  case CARD_HOLDER_NAME_MISSING
  case CARD_MONTH_EXPIRY_MISSING
  case CARD_YEAR_EXPIRY_MISSING
  case CARD_CVV_MISSING
  case CFCARD_CREATION_SUCCESSFUL
  case CFEMICARD_CREATION_SUCCESSFUL
  case INITIATING_CARD_PAYMENT
  case INITIATING_NETBANKING_PAYMENT
  case INITIATING_UPI_PAYMENT
  case INVOKING_CARD_PAYMENT_PAY_API
  case INVOKING_NETBANKING_PAYMENT_PAY_API
  case INVOKING_WALLET_PAYMENT_PAY_API
  case INVOKING_PAY_LATER_PAYMENT_PAY_API
  case INVOKING_UPI_PAYMENT_PAY_API
  case CARD_PAYMENT_INITIATION_FAILED
  case UPI_PAYMENT_INITIATION_FAILED
  case NO_INTERNET
  case DATA_RETRIEVAL_FAILED
  case RECEIVED_FAILED_RESPONSE_
  case PAYMENT_API_SUCCESS
  case OTP_SUCCESS
  case API_DATA_NIL
  case OUTPUT_SERIALISATION_ERROR
  case INPUT_SERIALISATION_ERROR
  case INVALID_URL_
  case CARD_PAYMENT_WEB_AUTH_FLOW_INITIATED
  case WEB_TRANSACTION_NAVIGATED_TO_THANK_YOU_PAGE
  case CARD_PAYMENT_HANDLE_SENT_BACK_TO_USER
  case NETBANKING_PAYMENT_INITIATION_FAILED
  case CARD_PAYMENT_API_DATA_NIL
  case NETBANKING_PAYMENT_API_DATA_NIL
  case CARD_PAYMENT_HANDLE_SENT_TO_USER_TO_LAUNCH_WEB_FOR_AUTHENTICATION
  case CARD_PAYMENT_HANDLE_SENT_TO_USER_TO_LAUNCH_HEADLESS_OTP_FOR_AUTHENTICATION
  case NETBANKING_PAYMENT_HANDLE_SENT_TO_USER_TO_LAUNCH_WEB_FOR_AUTHENTICATION
  case SET_BANK_CODE
  case SET_BANK_IFSC
  case SET_BANK_ACCOUNT_NUMBER
  case MISSING_BANK_CODE
  case MISSING_BANK_NAME
  case MISSING_BANK_IFSC
  case MISSING_BANK_ACCOUNT_NUMBER
  case SUCCESSFULLY_CREATED_CFNETBANKING_OBJECT
  case INITIATING_WALLET_PAYMENT
  case INITIATING_PAY_LATER_PAYMENT
  case WALLET_PAYMENT_INITIATION_FAILED
  case PAY_LATER_PAYMENT_INITIATION_FAILED
  case WALLET_PAYMENT_API_DATA_NIL
  case PAY_LATER_PAYMENT_API_DATA_NIL
  case WALLET_PAYMENT_HANDLE_SENT_TO_USER_TO_LAUNCH_WEB_FOR_AUTHENTICATION
  case PAY_LATER_PAYMENT_HANDLE_SENT_TO_USER_TO_LAUNCH_WEB_FOR_AUTHENTICATION
  case WALLET_PAYMENT_HANDLE_SENT_TO_USER_FOR_VERIFICATION_GPAY
  case SET_WALLET_CHANNEL
  case SET_WALLET_PHONE
  case MISSING_WALLET_CHANNEL
  case MISSING_WALLET_PHONE
  case SUCCESSFULLY_CREATED_WALLET_OBJECT
  case SUCCESSFULLY_CREATED_QRCODE_OBJECT
  case SET_UPI_CHANNEL
  case SET_UPI_ID
  case MISSING_UPI_CHANNEL
  case MISSING_UPI_ID
  case UPI_CHANNEL_IS_SET_TO_LINK_BUT_INVALID_UPI_ID_SENT
  case SUCCESSFULLY_CREATED_UPI_OBJECT
  case UPI_PAYMENT_FAILED
  case UPI_COLLECT_PAYMENT_HANDLE_SENT_TO_USER_FOR_VERIFICATION
  case UPI_INTENT_LAUNCHING_UPI_APPLICATION_
  case UPI_INTENT_UNABLE_TO_OPEN_SELECTED_APP
  case UPI_INTENT_SANDBOX_WEB_AUTHENTICATION
  case UPI_INTENT_USER_CANCELLED_APP_LAUNCH
  case SET_CARD_OBJECT
  case SET_SESSION_OBJECT
  case SET_CARD_PAYMENT_CALLBACK
  case MISSING_CARD_OBJECT
  case MISSING_SESSION_OBJECT
  case MISSING_CARD_PAYMENT_CALLBACK
  case SUCCESSFULLY_CREATED_CFCARD_PAYMENT_OBJECT
  case SET_UPI_OBJECT
  case SET_UPI_PAYMENT_CALLBACK
  case MISSING_UPI_OBJECT
  case MISSING_UPI_PAYMENT_CALLBACK
  case SUCCESSFULLY_CREATED_CFUPI_PAYMENT_OBJECT
  case SET_NETBANKING_OBJECT
  case SET_NETBANKING_PAYMENT_CALLBACK
  case MISSING_NETBANKING_OBJECT
  case MISSING_NETBANKING_PAYMENT_CALLBACK
  case SUCCESSFULLY_CREATED_CFNETBANKING_PAYMENT_OBJECT
  case SET_WALLET_OBJECT
  case SET_WALLET_PAYMENT_CALLBACK
  case SET_QRCODE_PAYMENT_CALLBACK
  case MISSING_WALLET_OBJECT
  case MISSING_WALLET_PAYMENT_CALLBACK
  case MISSING_QRCODE_PAYMENT_CALLBACK
  case SUCCESSFULLY_CREATED_CFWALLET_PAYMENT_OBJECT
  case SET_PAYMENT_OBJECT
  case MISSING_PAYMENT_OBJECT
  case INVALID_PAYMENT_OBJECT_SENT
  case MISSING_CALLBACK
  case FETCH_CONFIG_API
  case DELETE_SAVED_CARD
  case FETCH_SAVED_CARDS_API
  case FETCH_SAVED_CARDS_API_SUCCESS
  case FETCH_CONFIG_API_SUCCESS
  case ORDER_STATUS_NOT_ACTIVE
  case ORDER_EXPIRED
  case ORDER_ID_MISMATCH
  case SOMETHING_WENT_WRONG
  case FETCH_CONFIG_API_FAILED
  case FETCH_SAVED_CARDS_API_FAILED
  case BACK_BUTTON_TAPPED
  case EMPTY_PAYMENT_COMPONENTS
  case OPENING_QUICK_CHECKOUT
  case MERCHANT_LOGO_NOT_PRESENT
  case NETBANKING_PAYMENT_INITIATION_ERROR_THROWN
  case UPI_PAYMENT_INITIATION_ERROR_THROWN
  case WALLET_PAYMENT_INITIATION_ERROR_THROWN
  case PAY_LATER_PAYMENT_INITIATION_ERROR_THROWN
  case CARD_PAYMENT_INITIATION_ERROR_THROWN
  case EMI_CARD_PAYMENT_INITIATION_ERROR_THROWN
  case UPI_COLLECT_FROM_QUICK_CHECKOUT
  case UPI_INTENT_FROM_QUICK_CHECKOUT
  case NETBANKING_FROM_QUICK_CHECKOUT
  case WALLET_FROM_QUICK_CHECKOUT
  case PAYLATER_FROM_QUICK_CHECKOUT
  case PAYMENT_VERFICATION_RECON
  public var description: Swift.String {
    get
  }
  public static func == (a: CashfreeAnalyticsSDK.UserEventList, b: CashfreeAnalyticsSDK.UserEventList) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CFAnalytics) public class CFAnalytics : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CashfreeAnalyticsSDK.CFAnalytics {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CashfreeAnalyticsSDK.CFAnalytics>
  @objc @NSManaged dynamic public var endTime: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var environment: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var meta_data: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var order_token: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var platform: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdk_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startTime: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transaction_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var x_api_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var x_request_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var events: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension CashfreeAnalyticsSDK.CFAnalytics {
  @objc(insertObject:inEventsAtIndex:) @NSManaged dynamic public func insertIntoEvents(_ value: CashfreeAnalyticsSDK.CFEvent, at idx: Swift.Int)
  @objc(removeObjectFromEventsAtIndex:) @NSManaged dynamic public func removeFromEvents(at idx: Swift.Int)
  @objc(insertEvents:atIndexes:) @NSManaged dynamic public func insertIntoEvents(_ values: [CashfreeAnalyticsSDK.CFEvent], at indexes: Foundation.NSIndexSet)
  @objc(removeEventsAtIndexes:) @NSManaged dynamic public func removeFromEvents(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInEventsAtIndex:withObject:) @NSManaged dynamic public func replaceEvents(at idx: Swift.Int, with value: CashfreeAnalyticsSDK.CFEvent)
  @objc(replaceEventsAtIndexes:withEvents:) @NSManaged dynamic public func replaceEvents(at indexes: Foundation.NSIndexSet, with values: [CashfreeAnalyticsSDK.CFEvent])
  @objc(addEventsObject:) @NSManaged dynamic public func addToEvents(_ value: CashfreeAnalyticsSDK.CFEvent)
  @objc(removeEventsObject:) @NSManaged dynamic public func removeFromEvents(_ value: CashfreeAnalyticsSDK.CFEvent)
  @objc(addEvents:) @NSManaged dynamic public func addToEvents(_ values: Foundation.NSOrderedSet)
  @objc(removeEvents:) @NSManaged dynamic public func removeFromEvents(_ values: Foundation.NSOrderedSet)
}
@_inheritsConvenienceInitializers @objc(CFCrash) public class CFCrash : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CashfreeAnalyticsSDK.CFCrash {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CashfreeAnalyticsSDK.CFCrash>
}
@_inheritsConvenienceInitializers @objc(CFEvent) public class CFEvent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CashfreeAnalyticsSDK.CFEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CashfreeAnalyticsSDK.CFEvent>
  @objc @NSManaged dynamic public var callingObject: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var memoryUtilized: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var networkType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var order_token: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transaction: CashfreeAnalyticsSDK.CFAnalytics? {
    @objc get
    @objc set
  }
}
extension CashfreeAnalyticsSDK.CFReachability.ReachabilityStatus : Swift.Equatable {}
extension CashfreeAnalyticsSDK.CFReachability.ReachabilityStatus : Swift.Hashable {}
extension CashfreeAnalyticsSDK.CFReachability.ReachabilityStatus : Swift.RawRepresentable {}
extension CashfreeAnalyticsSDK.UserEventList : Swift.Equatable {}
extension CashfreeAnalyticsSDK.UserEventList : Swift.Hashable {}
